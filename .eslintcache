[{"/Volumes/WORKSPACE/learning/React/webrtc-test/src/App.jsx":"1","/Volumes/WORKSPACE/learning/React/webrtc-test/src/index.jsx":"2","/Volumes/WORKSPACE/learning/React/webrtc-test/src/Containers/Home/index.js":"3","/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/PageWrapper/index.js":"4","/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/BottomActionBar/index.js":"5","/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/VideoController/index.js":"6","/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/index.js":"7","/Volumes/WORKSPACE/learning/React/webrtc-test/src/configs/RTC.config.js":"8"},{"size":269,"mtime":1610825573000,"results":"9","hashOfConfig":"10"},{"size":455,"mtime":1610825245000,"results":"11","hashOfConfig":"10"},{"size":4396,"mtime":1611075119000,"results":"12","hashOfConfig":"10"},{"size":444,"mtime":1610866402000,"results":"13","hashOfConfig":"10"},{"size":1671,"mtime":1610859092000,"results":"14","hashOfConfig":"10"},{"size":2365,"mtime":1610884332000,"results":"15","hashOfConfig":"10"},{"size":146,"mtime":1610828329000,"results":"16","hashOfConfig":"10"},{"size":763,"mtime":1610861802000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cypugf",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/WORKSPACE/learning/React/webrtc-test/src/App.jsx",[],"/Volumes/WORKSPACE/learning/React/webrtc-test/src/index.jsx",[],"/Volumes/WORKSPACE/learning/React/webrtc-test/src/Containers/Home/index.js",["35","36","37","38"],"import React, { useEffect, useState } from 'react';\nimport NeatRTC from 'neat-rtc';\nimport styled from 'styled-components';\n\nimport { VideoController, BottomActionBar } from '../../Components';\nimport RTCConfig from '../../configs/RTC.config';\n\nconst P2P = require('socket.io-p2p');\nconst io = require('socket.io-client');\nconst socket = io();\nconst opts = { numClients: 10, autoUpgrade: false, }; // connect up to 10 clients at a time\nconst p2psocket = new P2P(socket, opts, function () {\n  console.log('We all speak WebRTC now');\n});\n\nconst Home = () => {\n  const [inMeeting, _setInMeeting] = useState(false);\n  const [randomId, _setRandomId] = useState(null);\n\n  const constraints = window.constraints = {\n    audio: true,\n    video: true\n  };\n\n  useEffect(() => {\n    p2psocket.on('peer-msg', function (data) {\n      // append message to list\n      console.log(\"-*-* new Message -*-*\", data);\n    });\n\n    p2psocket.on('go-private', function () {\n      p2psocket.upgrade(); // upgrade to peerConnection\n    });\n  })\n\n  const handleSuccess = (stream) => {\n    const randomId = String(new Date() - new Date().setHours(0, 0, 0, 0));\n    const video = document.querySelector('#reciever');\n    const videoTracks = stream.getVideoTracks();\n\n    console.log('Got stream with constraints:', constraints);\n    console.log(`Using video device: ${videoTracks[0].label}`);\n\n    window.stream = stream; // make variable available to browser console\n    video.srcObject = stream;\n    _setRandomId(randomId);\n    _setInMeeting(true);\n\n    p2psocket.emit('peer-msg', { textVal: +new Date() })\n  }\n\n  const handleError = (error) => {\n    if (error.name === 'ConstraintNotSatisfiedError') {\n      const v = constraints.video;\n      errorMsg(`The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`);\n    } else if (error.name === 'PermissionDeniedError') {\n      errorMsg('Permissions have not been granted to use your camera and ' +\n        'microphone, you need to allow the page access to your devices in ' +\n        'order for the demo to work.');\n    }\n    errorMsg(`getUserMedia error: ${error.name}`, error);\n  }\n\n  const errorMsg = (msg, error) => {\n    const errorElement = document.querySelector('#errorMsg');\n    errorElement.innerHTML += `<p>${msg}</p>`;\n    if (typeof error !== 'undefined') {\n      console.error(error);\n    }\n  }\n\n  const getUserMedia = async (e) => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      handleSuccess(stream);\n      e.target.disabled = true;\n    } catch (e) {\n      handleError(e);\n    }\n  }\n\n  const getDislayMedia = () => {\n\n  }\n\n  const joinMeetingWithId = (meetingId) => {\n\n  }\n\n  return (\n    <Wrapepr>\n      <H1 >Welcome to WebRTC Demo ðŸ”¥</H1>\n      <VideoController\n        randomId={randomId}\n        inMeeting={inMeeting}\n        getUserMedia={getUserMedia}\n        joinMeetingWithId={joinMeetingWithId} />\n      {/* <BottomActionBar /> */}\n    </Wrapepr>\n  )\n}\n\nexport default Home;\n\nconst Wrapepr = styled.div`\n  height: 100vh;\n  width: 100vw;\n`\n\nconst H1 = styled.h1`\n  text-align: center;\n  font-size: 5rem;\n`\n\n\n  // const [rtc, _setRTC] = useState(null);\n\n  // useEffect(() => {\n  //   const config = RTCConfig(connected,\n  //     mediaStreamConnected,\n  //     mediaStreamRemoved,\n  //     mediaStreamRemoteRemoved,\n  //     datachannelOpen,\n  //     datachannelMessage,\n  //     datachannelError,\n  //     datachannelClose)\n  //   const rtc = new NeatRTC(config, sendSignalingMessage);\n\n  //   _setRTC(rtc);\n  //   return () => { }\n  // }, []);\n\n  // const connected = () => {\n  //   console.log(\"  connected  \");\n  // }\n  // const mediaStreamConnected = () => {\n  //   console.log(\"  mediaStreamConnected  \");\n  // }\n  // const mediaStreamRemoved = () => {\n  //   console.log(\"  mediaStreamRemoved  \");\n  // }\n  // const mediaStreamRemoteRemoved = () => {\n  //   console.log(\" mediaStreamRemoteRemoved \");\n  // }\n  // const datachannelOpen = () => {\n  //   console.log(\" datachannelOpen \");\n  // }\n  // const datachannelMessage = () => {\n  //   console.log(\" datachannelMessage \");\n  // }\n  // const datachannelError = (err) => {\n  //   console.log(\" datachannelError \", err);\n  // }\n  // const datachannelClose = () => {\n  //   console.log(\"  datachannelClose \");\n  // }\n\n  // const sendSignalingMessage = (message) => {\n  //   console.log('signaling', message);\n  // }","/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/PageWrapper/index.js",[],"/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/BottomActionBar/index.js",["39","40"],"/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/VideoController/index.js",[],"/Volumes/WORKSPACE/learning/React/webrtc-test/src/Components/index.js",[],"/Volumes/WORKSPACE/learning/React/webrtc-test/src/configs/RTC.config.js",[],{"ruleId":"41","severity":1,"message":"42","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":15},{"ruleId":"41","severity":1,"message":"45","line":5,"column":27,"nodeType":"43","messageId":"44","endLine":5,"endColumn":42},{"ruleId":"41","severity":1,"message":"46","line":6,"column":8,"nodeType":"43","messageId":"44","endLine":6,"endColumn":17},{"ruleId":"41","severity":1,"message":"47","line":82,"column":9,"nodeType":"43","messageId":"44","endLine":82,"endColumn":23},{"ruleId":"41","severity":1,"message":"48","line":5,"column":8,"nodeType":"43","messageId":"44","endLine":5,"endColumn":22},{"ruleId":"49","severity":1,"message":"50","line":7,"column":26,"nodeType":"51","messageId":"52","endLine":7,"endColumn":29},"no-unused-vars","'NeatRTC' is defined but never used.","Identifier","unusedVar","'BottomActionBar' is defined but never used.","'RTCConfig' is defined but never used.","'getDislayMedia' is assigned a value but never used.","'NavigationIcon' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected"]